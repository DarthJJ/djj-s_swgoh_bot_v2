package nl.djj.swgoh_bot_v2.helpers;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.MessageEmbed;
import nl.djj.swgoh_bot_v2.commands.BaseCommand;
import nl.djj.swgoh_bot_v2.config.Config;
import nl.djj.swgoh_bot_v2.entities.Message;
import nl.djj.swgoh_bot_v2.entities.SwgohProfile;

import java.awt.*;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author DJJ
 */
//CHECKSTYLE.OFF: MultipleStringLiteralsCheck
public final class MessageHelper {
    private static final String REACTION_POSITIVE = "U+1F44D";
    private static final String REACTION_ERROR = "U+274C";
    private static final String REACTION_DONE = "U+2705";

    /**
     * Constructor.
     */
    private MessageHelper() {
        super();
    }

    private static MessageEmbed baseEmbed() {
        final EmbedBuilder builder = new EmbedBuilder();
        builder.setAuthor(Config.BOT_NAME, "https://www.youtube.com/watch?v=YddwkMJG1Jo", "https://cdn.discordapp.com/avatars/405842805441822721/83e13c25144df2db31aa963083e6dc40.png");
        builder.setColor(new Color(Config.BOT_COLOUR));
        builder.setTimestamp(ZonedDateTime.now());
        builder.setFooter("Generated by: " + Config.BOT_NAME);
        return builder.build();
    }

    /**
     * Sends a working reaction to the message.
     *
     * @param message the message.
     */
    public static void addWorkingReaction(final Message message) {
        message.getChannel().addReactionById(message.getMessageId(), REACTION_POSITIVE).queue();
    }

    /**
     * Sends an error reaction to the message.
     *
     * @param message the message.
     */
    public static void addErrorReaction(final Message message) {
        message.getChannel().addReactionById(message.getMessageId(), REACTION_ERROR).queue();
    }

    /**
     * Sends a positive reaction to the message.
     *
     * @param message the message.
     */
    public static void addDoneReaction(final Message message) {
        message.getChannel().addReactionById(message.getMessageId(), REACTION_DONE).queue();
    }

    /**
     * Creates the generic help text.
     *
     * @param helpText the help text.
     * @return the messageEmbed.
     */
    public static List<MessageEmbed> formatGenericHelpText(final Map<String, List<BaseCommand>> helpText) {
        final List<MessageEmbed> returnValue = new ArrayList<>();
        EmbedBuilder builder = new EmbedBuilder(baseEmbed());
        builder.appendDescription("Generic help information");
        for (final Map.Entry<String, List<BaseCommand>> entry : helpText.entrySet()) {
            final StringBuilder helpString = new StringBuilder();
            for (final BaseCommand command : entry.getValue()) {
                helpString.append(String.format("%-15s%-15s%n", command.getName() + " = ", command.getDescription()));
            }
            helpString.append("\n");
            builder.addField(new MessageEmbed.Field(entry.getKey(), helpString.toString(), false));
            if (builder.length() >= MessageEmbed.EMBED_MAX_LENGTH_BOT - 500) {
                returnValue.add(builder.build());
                builder = new EmbedBuilder(baseEmbed());
            }
        }
        returnValue.add(builder.build());
        return returnValue;
    }

    /**
     * Formats the info to an embed.
     *
     * @param profile the profile.
     * @return a message embed.
     */
    public static MessageEmbed formatSwgohProfile(final SwgohProfile profile) {
        final EmbedBuilder builder = new EmbedBuilder(baseEmbed());
        builder.appendDescription("Generic Profile info for: " + profile.getName());
        final String generic = String.format("%-15s%-15s%n", "Level = ", profile.getLevel()) +
                String.format("%-15s%-15s%n", "Guild = ", profile.getGuild());
        builder.addField(new MessageEmbed.Field("generic", "```" + generic + "```", false));
        final String gp = String.format("%-15s%-15s%n", "GP_total = ", profile.getGpTotal()) +
                String.format("%-15s%-15s%n", "GP_toons = ", profile.getGpToons()) +
                String.format("%-15s%-15s%n", "GP_ships = ", profile.getGpShips());
        builder.addField(new MessageEmbed.Field("GP", "```" + gp + "```", false));
        final String arena = String.format("%-15s%-15s%n", "Toon Arena = ", profile.getToonRank()) +
                String.format("%-15s%-15s%n", "Ship Arena = ", profile.getShipRank());
        builder.addField(new MessageEmbed.Field("Arena", "```" + arena + "```", false));
        final String profileLink = String.format("%-15s%-15s%n", "SWGOH ", "[Profile](" + profile.getProfileUrl() + ")");
        builder.addField(new MessageEmbed.Field("SWGOH", profileLink, false));
        return builder.build();
    }
    //CHECKSTYLE.ON: MultipleStringLiteralsCheck
}
